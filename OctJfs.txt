on-1  off-0   -------->Ascii/unicode....------>a-98

s.l:- designing the website
		html,css,bootstrap,js,ts......

p.l:- developing the softwares
		

								computer lang 
						Scripting lngs		programming langs
										
										pop(procedure o.p)		oop(object o.p)
									basic,python,....			java,.net,python.....
									
									
	security:- Abstraction,Encapsulation
	
	performance :- Inheritance,Polymorphism
	
	
	java is :- oops       	oopl
	
	
	sunmicro sys:-portability
	
	green team 
	
	greentalk(.gt)-------->oak------->java(.java)
	
	jdk 1.0--------------------------->jdk 23 (oracle)
	
	
	jse/j2se:-standalone (no server -client) - core java
	
	jee/j2ee:-distributed(server -client),web app's  - core java+ frameworks =Adv java
	
	jme/j2me:-mobile app's- micro core java
	
	
	(1)Portable 
	
	(2)Garbage Collector
	
	
	version check:- java --version
									
	
	53 keywords :- 
	
	
	Variables :- 
	
			syntax:- 
			
				dt varname ;  //declaration of a variable
				
				dt varname = value; //initiallization of a variable
				
		local variable(inside the method body)		global variable(outside the method)
											
												static 					instance
												
	
	syntax:-
	-------

static:-  	static dt varname = value;

instance :-  		dt varname = value;


	memory allocation:-
	-----------------
	
static :- Static prop's will gets the memory space only once when the class loads into the jvm.

instance :- instance prop's will gets the memory space for every object creation.

	Access:-
	------
	
static :- Static prop's(vr+meth) can be accessed by the class reference.

instance :- Instance prop's can be accessed by the object reference.

	Usage :-
	-----
	
static:- to store common data       

instance :- to store the unique data

	in memory:-
	---------
	
static :-In method area

instance:-In heap area


class ----- variable + methods(class members +member functions)


object 


OPERATORS:-  ULTRA AB
----------------------

									operand<-----a  +   b ---->operands

Uniary operator

Logical operator

Ternary operator

Relational operator

Assignment operator

Arithematic operator

Bitwise operator


Method:- set of statements where altogether performs the task.

	based on the syntax diff :- 2 types		(1)Static method
											(2)Dynamic method
											
	

		Static method:-
		
				a.m static returntype methodname(parms..){		
				//body
				}
				
		Dynamic method:-
		
				a.m returntype methodname(parms..){
				//body
				}
				
				
class:- variables + methods [class member +member functions]



Inheritance:-Accquiring parent class features to the child class.
------------
							
				*Code Reusability			
						
				extends 					implements
			class ---> class 			interface----->class
			
		
			
		class A{							class B{
		
		add(int a,int b){					add(int x,int y){
		
		return a+b;							return x*y;
		}									}
								
		
		}									}
		
						class C extends A,B{
						
						obj.add(2,8);			//
						
						}
						
						
		*M.I is not supported in java @Class level.
		
		*M.I is supported in java @interface level.
		
		
		
		methods:- based on the method body:- 2 types
		
			(1)concrete method  :- the method with method body/implementation.
			
							syntax:-
							
								a.m returntype methodname(parms..){
								
								//body
								}
								
			
			(2)abstract method:- the method without method body/implementation.
		
		
						syntax:-
							
								a.m returntype methodname(parms..);
								
								
		class:- It is the collection of only concrete methods.
		
		
		interface :- It's the collection of only abstract methods.
		
		
		abstract class:- It's the collection of both concrete and abstract methods.
		
		
Abstraction:-Hiding the data
============

					* Security
					
	
	interface ---100%
	
	
	abstract ----0%-100%
	
	
	class ------0%
	
	
	Polymorphism:-Same method but will work's differently.
	============


		(1)methodOverloading:-same method name but difference is in it's params:-
								(a)type of params..
								(b)order of params..
								(c)no:-of params..
		
		
		(2)methodOverriding:- method name is same but the implementation is diff.
		
		
		class Parent{
		
		1000Cr();
		
		marriage(){
		kajol;
		}
		...............
		}
		
		class Child extends Parent{
		
		
		
		}
		
		Encapsulation:-Wraps up the data into a single unit.
		
		AccessModifer :- private public protected default
		
		
		Constructor:-To initiallize the objects.
		
		
				(1)Default constructor:-
				
					a.m className(){
					
					//body
					}
				
				(2)parametrised constructor
				
					a.m className(params..){
					
					//body
					}
					
					ClassName obj= new ClassName();
					
			****Constructor call must be the first statement in a constructor
			
			
	
		Array:-	It's a collection of similar kind of elements
		=====
		
		(1)dt arrname[] = {1,2,3,4,5,6,67,7,8,9,4};
		
		(2)dt arranme[] = new dt[]{1,2,3,4,5,5,6,7,7,7};
		
		(3)dt arrname[] = new dt[10];
		
			arrname[0]  = 23;
			
			
	limitations:-
	============
	
	(1)It can only allows homogeneous elements.
	
	(2)it is fixed in size.
	
	(3)no utility methods.
	
	
	collections:-(framework)   java.util
	============
	
	(1)It can  allows both heterogeneous/homogeneous elements.
	
	(2)it is not fixed in size.
	
	(3)lots of utility methods.
	
	
	java.lang.Comparable---------->compareTo(object)-------->CSO
	
	java.util.Comparator---------->compare(obj1,obj2) ------>NSO
	
									apple , banana
									
									a-b=97-98 = -(-ve )= +ve
									
									
									
	fileHandling:- java.io.*
	============
	
	
	To create a file :- File
	
	To write into the file :- FileWriter
							  BufferedWriter
							  PrintWriter
							  
							  
	To read from the file:-	  FileReader
							  BufferedReader
							  
							  
							  
	String:-
	=======
	
	
	
	String varn = value;
	
	
	String 				StringBuffer 				StringBuilder
	
(1)	immutable			mutable						mutable

						synchronized				not-synchronized(mutlithreading)
						
						
	
	
	MutliThreading:- The process of executing many process at a time.
	
	
									Database:-
									=========
		apples		334			

		tulips		234	
					
		roses		232				
									
		toys		344
		
		
		Data :- raw info 
		
		
		Database :- organised collection of data.
		
		
		RDBMS ------->Table :- rows(records) + columns(fields)
		
		oracle---------------->sql
		
		mysql----------------->mysql
		
		querys:-To perform any kind of operation in the db we need use querys.5 categories:-
		======
		
		
		(1)DDL(Data Definition Language):-create,alter,drop,truncate,rename   [auto-committed]
		
		(2)DML(Data Manipulation Language):-insert,update,delete  [not auto-committed]
		
		(3)DRL(Data Retrival Language):-select
		
		(4)DCL(Data Control Language):- grant,revoke
		
		(5)TCL(Trans'xn Control Language):- commit(ctrl+s),rollback(ctrl+z)
		
		
		Table creation:- 
		
		create table emp(eid int,ename varchar(10),esal int);
		
		
		drop :-deletes table from database
		
		truncate :- deletes data inside the table
		
		delete:-we can delete the selected rows.
		
	cmd>	truncate table emp/delete from emp;  ====>deletes all the records inside the table
	
	
	
	